version: '3.9'
services:
  mysql:
    image: mysql:8.0
    container_name: mysql
    volumes:
      #- ./var/lib/mysql:/var/lib/mysql
      - ./my.cnf:/etc/mysql/conf/d/my.cnf:ro
      - ./initdb:/docker-entrypoint-initdb.d
      - ./main:/app/main
      - ./wait-for-it.sh:/app/wait-for-it.sh
    ports:
      - 3306:3306
    environment:
      - MYSQL_ROOT_PASSWORD=secret
      - MYSQL_USER=admin
      - MYSQL_PASSWORD=secret
      - MYSQL_DATABASE=db_test
      - MYSQL_ADDR=mysql:3306
      - TABLES=engineer
      - NUM_WORKERS=10
      - NUM_RECORDS=100000
    depends_on:
      init-kafka:
        condition: service_completed_successfully
    networks:
      - db_network
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    container_name: zookeeper
    restart: always
    hostname: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: zoo1:2888:3888
    #volumes:
      #- ./var/lib/zookeeper/data:/data
      #- ./var/lib/zookeeper/datalog:/datalog
    networks:
      - db_network
  kafka:
    container_name: kafka
    image: confluentinc/cp-kafka:7.3.2
    hostname: kafka
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:19092,EXTERNAL://${DOCKER_HOST_IP:-host.docker.internal}:9092,DOCKER://host.docker.internal:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
    depends_on:
      - zookeeper
    networks:
        - db_network
  init-kafka:
    container_name: init-kafka
    image: confluentinc/cp-kafka:7.3.2
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server kafka:29092 --list
      
      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic engineer --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic commit-log --replication-factor 1 --partitions 1
      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server kafka:29092 --list
      "
    depends_on:
      - kafka
    networks:
      - db_network
  kafdrop:
    container_name: kafdrop
    image: obsidiandynamics/kafdrop
    restart: "no"
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: kafka:29092
    depends_on:
      - kafka
      - init-kafka
    networks:
      - db_network

networks:
  db_network:
    driver: bridge